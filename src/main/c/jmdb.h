/* DO NOT EDIT THIS FILE - it is machine generated */
#include "jni.h"
/* Header for class jmdb_DatabaseWrapper */

#ifndef _Included_jmdb_DatabaseWrapper
#define _Included_jmdb_DatabaseWrapper
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    getEnvSize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jmdb_DatabaseWrapper_getEnvSize
  (JNIEnv *, jclass);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    getStatSize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_jmdb_DatabaseWrapper_getStatSize
  (JNIEnv *, jclass);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envCreate
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_jmdb_DatabaseWrapper_envCreate
  (JNIEnv *, jclass);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envOpen
 * Signature: (JLjava/lang/String;II)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_envOpen
  (JNIEnv *, jclass, jlong, jstring, jint, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envCopy
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_envCopy
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envStat
 * Signature: (J[J)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_envStat
  (JNIEnv *, jclass, jlong, jlongArray);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envInfo
 * Signature: (J[J)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_envInfo
  (JNIEnv *, jclass, jlong, jlongArray);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envSync
 * Signature: (JZ)V
 */
void Java_jmdb_DatabaseWrapper_envSync
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envClose
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_envClose
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envSetFlags
 * Signature: (JIZ)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_envSetFlags
  (JNIEnv *, jclass, jlong, jint, jboolean);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envGetFlags
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_jmdb_DatabaseWrapper_envGetFlags
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envGetPath
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_jmdb_DatabaseWrapper_envGetPath
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envSetMapSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_envSetMapSize
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envSetMaxReaders
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_envSetMaxReaders
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envGetMaxReaders
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_jmdb_DatabaseWrapper_envGetMaxReaders
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envSetMaxDbs
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_envSetMaxDbs
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    envGetMaxKeySize
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_jmdb_DatabaseWrapper_envGetMaxKeySize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    txnBegin
 * Signature: (JJI)J
 */
JNIEXPORT jlong JNICALL Java_jmdb_DatabaseWrapper_txnBegin
  (JNIEnv *, jclass, jlong, jlong, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    txnEnv
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_jmdb_DatabaseWrapper_txnEnv
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    txnCommit
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_txnCommit
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    txnAbort
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_txnAbort
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    txnReset
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_txnReset
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    txnRenew
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_txnRenew
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    dbiOpen
 * Signature: (JLjava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_jmdb_DatabaseWrapper_dbiOpen
  (JNIEnv *, jclass, jlong, jstring, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    stat
 * Signature: (JI[J)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_stat
  (JNIEnv *, jclass, jlong, jint, jlongArray);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    dbiFlags
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_jmdb_DatabaseWrapper_dbiFlags
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    dbiClose
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_dbiClose
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    get
 * Signature: (JI[BII[BII)I
 */
JNIEXPORT jint JNICALL Java_jmdb_DatabaseWrapper_get
  (JNIEnv *, jclass, jlong, jint, jbyteArray, jint, jint, jbyteArray, jint, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    put
 * Signature: (JI[BII[BIII)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_put
  (JNIEnv *, jclass, jlong, jint, jbyteArray, jint, jint, jbyteArray, jint, jint, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    del
 * Signature: (JI[BII[BII)V
 */
JNIEXPORT jboolean JNICALL Java_jmdb_DatabaseWrapper_del
  (JNIEnv *, jclass, jlong, jint, jbyteArray, jint, jint, jbyteArray, jint, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    cursorOpen
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_jmdb_DatabaseWrapper_cursorOpen
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    cursorClose
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_cursorClose
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    cursorRenew
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_cursorRenew
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    cursorTxn
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_jmdb_DatabaseWrapper_cursorTxn
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    cursorDbi
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_jmdb_DatabaseWrapper_cursorDbi
  (JNIEnv *, jclass, jlong);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    cursorGet
 * Signature: (J[BII[BIII)V
 */
JNIEXPORT jlong JNICALL Java_jmdb_DatabaseWrapper_cursorGet
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jint, jbyteArray, jint, jint, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    cursorPut
 * Signature: (J[BII[BIII)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_cursorPut
  (JNIEnv *, jclass, jlong, jbyteArray, jint, jint, jbyteArray, jint, jint, jint);

/*
 * Class:     jmdb_DatabaseWrapper
 * Method:    cursorDel
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_jmdb_DatabaseWrapper_cursorDel
  (JNIEnv *, jclass, jlong, jint);

#ifdef __cplusplus
}
#endif
#endif
